<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Standalone Activity: Pelmanism Memory Match</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Questrial&family=Nunito:ital,wght@0,400;0,600;0,700;1,400&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary-sage: #7A8471;
      --secondary-sage: #9CAF88;
      --tertiary-sage: #B8C5A6;
      --warm-cream: #F8F6F0;
      --soft-white: #FEFCF7;
      --clay-brown: #A0826D;
      --forest-shadow: #5A6B52;
      --border-sage: rgba(122, 132, 113, 0.2);
      --hover-sage: rgba(156, 175, 136, 0.15);
      --correct-bg: #E8F5E9;
      --correct-border: #2E7D32;
      --incorrect-bg: #FFEBEE;
      --incorrect-border: #C62828;
      --font-display: 'Questrial', sans-serif;
      --font-body: 'Nunito', sans-serif;
      --feedback-width-desktop: 380px;
    }

    html, body {
      margin: 0; padding: 0; width: 100%;
      font-family: var(--font-body);
      background: linear-gradient(135deg, #F8F6F0 0%, #F5F3ED 100%);
      overflow-x: hidden;
    }

    body.feedback-open { overflow: hidden; }

    #app-wrapper {
      position: relative; display: flex; justify-content: center;
      align-items: flex-start; padding: 2rem; box-sizing: border-box; width: 100%;
    }

    #activity-container {
      width: 100%; max-width: 940px; background: var(--soft-white);
      padding: 48px; border-radius: 20px;
      border: 1px solid rgba(122, 132, 113, 0.12);
      box-shadow: 0 8px 32px rgba(122, 132, 113, 0.08);
      box-sizing: border-box; transition: margin-right 0.5s cubic-bezier(0.23, 1, 0.32, 1);
    }

    @media (min-width: 1024px) {
      #app-wrapper.feedback-visible #activity-container { margin-right: var(--feedback-width-desktop); }
    }

    #activity-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      gap: 32px;
      margin-bottom: 32px;
    }

    #activity-titles { flex-grow: 1; }

    h1 {
      font-family: var(--font-display);
      font-size: 2.5rem;
      color: var(--forest-shadow);
      margin: 0 0 8px 0;
    }

    h2.rubric {
      font-family: var(--font-body);
      font-size: 1.1rem;
      color: var(--secondary-sage);
      margin: 0;
      border-left: 3px solid var(--tertiary-sage);
      padding-left: 12px;
    }

    #decorative-image-container {
      flex-shrink: 0;
      width: 180px;
      height: 120px;
      background-color: var(--warm-cream);
      border-radius: 12px;
      overflow: hidden;
      display: flex;
      align-items: center;
      justify-content: center;
      border: 1px solid var(--border-sage);
    }

    #decorative-image-container img {
      width: 100%; height: 100%; object-fit: cover;
    }

    #activity-brief {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      gap: 24px;
      margin-bottom: 32px;
    }

    #activity-brief .brief-card {
      background: var(--warm-cream);
      border-radius: 16px;
      border: 1px solid var(--border-sage);
      padding: 20px;
      box-shadow: 0 4px 16px rgba(122, 132, 113, 0.08);
    }

    #activity-brief .brief-card h3 {
      margin: 0 0 12px 0;
      font-size: 1.1rem;
      color: var(--primary-sage);
      font-family: var(--font-display);
    }

    #activity-brief .brief-card p {
      margin: 0;
      color: var(--forest-shadow);
      line-height: 1.6;
      font-size: 0.98rem;
    }

    .memory-summary {
      display: flex;
      gap: 16px;
      flex-wrap: wrap;
      margin-bottom: 24px;
    }

    .summary-pill {
      padding: 10px 16px;
      background-color: var(--warm-cream);
      border-radius: 999px;
      border: 1px solid var(--border-sage);
      font-weight: 600;
      color: var(--primary-sage);
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .summary-pill span.icon {
      display: inline-flex;
      width: 28px;
      height: 28px;
      border-radius: 50%;
      align-items: center;
      justify-content: center;
      background-color: var(--soft-white);
      border: 1px solid var(--border-sage);
      color: var(--clay-brown);
      font-size: 0.95rem;
    }

    .memory-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
      gap: 18px;
      margin-bottom: 28px;
    }

    .memory-card {
      position: relative;
      border: none;
      padding: 0;
      border-radius: 18px;
      cursor: pointer;
      background: transparent;
      perspective: 1000px;
      height: 160px;
      transition: transform 0.2s ease;
      -webkit-tap-highlight-color: transparent;
    }

    .memory-card:focus-visible {
      outline: 3px solid var(--secondary-sage);
      outline-offset: 3px;
    }

    .memory-card[disabled] { cursor: default; }

    .card-inner {
      position: absolute;
      top: 0; left: 0;
      width: 100%; height: 100%;
      border-radius: 18px;
      background-color: var(--soft-white);
      border: 2px solid var(--border-sage);
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 18px;
      box-sizing: border-box;
      text-align: center;
      color: var(--forest-shadow);
      font-weight: 600;
      line-height: 1.5;
      transition: transform 0.6s ease, background-color 0.3s ease, border-color 0.3s ease;
      transform-style: preserve-3d;
    }

    .memory-card .card-front,
    .memory-card .card-back {
      position: absolute;
      width: 100%;
      height: 100%;
      backface-visibility: hidden;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 18px;
      box-sizing: border-box;
      border-radius: 16px;
    }

    .card-front {
      background-color: var(--primary-sage);
      color: var(--soft-white);
      font-family: var(--font-display);
      font-size: 1.1rem;
      letter-spacing: 0.5px;
    }

    .card-back {
      transform: rotateY(180deg);
      font-size: 1rem;
      color: var(--forest-shadow);
    }

    .memory-card.revealed .card-inner {
      transform: rotateY(180deg);
      border-color: var(--secondary-sage);
      background-color: var(--warm-cream);
      box-shadow: 0 6px 20px rgba(122, 132, 113, 0.2);
    }

    .memory-card.matched .card-inner {
      border-color: var(--correct-border);
      background-color: var(--correct-bg);
      box-shadow: 0 6px 20px rgba(46, 125, 50, 0.25);
    }

    .memory-card.matched .card-back {
      color: #1B5E20;
    }

    .memory-card.processing { pointer-events: none; }

    .memory-status {
      display: flex;
      align-items: center;
      gap: 16px;
      flex-wrap: wrap;
      margin-bottom: 16px;
      color: var(--forest-shadow);
    }

    .memory-status strong { font-family: var(--font-display); color: var(--clay-brown); }

    .activity-controls {
      margin-top: 16px;
      display: flex;
      gap: 12px;
      align-items: center;
      flex-wrap: wrap;
    }

    .activity-btn {
      padding: 12px 24px;
      border-radius: 12px;
      border: 1px solid var(--primary-sage);
      background-color: var(--primary-sage);
      color: white;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s;
      -webkit-tap-highlight-color: transparent;
    }

    .activity-btn:hover {
      background-color: var(--forest-shadow);
      transform: translateY(-1px);
    }

    .activity-btn.secondary {
      background-color: transparent;
      color: var(--primary-sage);
      border-color: var(--tertiary-sage);
    }

    .activity-btn.secondary:hover {
      background-color: var(--hover-sage);
    }

    .activity-btn:disabled {
      background-color: var(--tertiary-sage);
      cursor: not-allowed;
      border-color: var(--tertiary-sage);
      transform: none;
    }

    .language-support {
      margin-top: 32px;
      padding: 24px;
      border-radius: 18px;
      border: 1px dashed var(--border-sage);
      background-color: #fbf8f2;
    }

    .language-support h3 {
      margin: 0 0 12px 0;
      font-size: 1.2rem;
      font-family: var(--font-display);
      color: var(--forest-shadow);
    }

    .language-support ul {
      margin: 0;
      padding-left: 20px;
      color: var(--forest-shadow);
      line-height: 1.7;
      font-size: 0.98rem;
    }

    #feedback-sidebar {
      position: fixed;
      top: 0; right: 0;
      width: 100%;
      height: 100%;
      background: var(--warm-cream);
      border-left: 1px solid var(--border-sage);
      box-shadow: -8px 0 32px rgba(90, 107, 82, 0.1);
      z-index: 1000;
      transform: translateX(100%);
      transition: transform 0.5s cubic-bezier(0.23, 1, 0.32, 1);
      display: flex;
      flex-direction: column;
      box-sizing: border-box;
    }

    @media (min-width: 1024px) {
      #feedback-sidebar {
        width: var(--feedback-width-desktop);
        height: 100vh;
      }
    }

    #app-wrapper.feedback-visible #feedback-sidebar {
      transform: translateX(0);
    }

    .feedback-header {
      padding: 24px;
      border-bottom: 1px solid var(--border-sage);
      background: var(--soft-white);
    }

    .feedback-header h3 {
      margin: 0 0 8px 0;
      font-size: 1.8rem;
      font-family: var(--font-display);
      color: var(--forest-shadow);
    }

    #feedback-score {
      font-size: 1.1rem;
      font-weight: 600;
      color: var(--primary-sage);
    }

    #feedback-details {
      flex-grow: 1;
      overflow-y: auto;
      padding: 24px;
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    .feedback-item {
      background: var(--soft-white);
      border: 1px solid var(--border-sage);
      border-left-width: 4px;
      border-radius: 10px;
      padding: 16px;
    }

    .feedback-item h4 {
      margin: 0 0 8px 0;
      color: var(--forest-shadow);
      font-family: var(--font-display);
    }

    .feedback-item p {
      margin: 0 0 6px 0;
      color: var(--primary-sage);
      line-height: 1.6;
      font-size: 0.95rem;
    }

    .feedback-item .example {
      margin-top: 10px;
      padding: 12px;
      background: var(--warm-cream);
      border-radius: 8px;
      border: 1px dashed var(--border-sage);
      font-style: italic;
      color: var(--clay-brown);
    }

    .feedback-footer {
      padding: 24px;
      border-top: 1px solid var(--border-sage);
      text-align: center;
      background: var(--warm-cream);
    }

    .feedback-footer button {
      padding: 10px 20px;
      border-radius: 10px;
      border: 1px solid var(--primary-sage);
      background-color: var(--primary-sage);
      color: #fff;
      font-weight: 600;
      cursor: pointer;
    }

    .feedback-footer button:hover {
      background-color: var(--forest-shadow);
    }

    @media (max-width: 767px) {
      #app-wrapper { padding: 1rem; }
      #activity-container { padding: 28px; }
      #activity-header {
        flex-direction: column;
        align-items: center;
        text-align: center;
      }
      #decorative-image-container { width: 100%; height: 160px; }
      .memory-card { height: 140px; }
    }
  </style>
</head>
<body>
  <div id="app-wrapper">
    <main id="activity-container" aria-labelledby="activity-title">
      <header id="activity-header">
        <div id="activity-titles">
          <h1 id="activity-title">Pelmanism: Eco-English Memory Match</h1>
          <h2 class="rubric">Match the sustainable travel collocations to their explanations. You have 90 seconds to find all the pairs.</h2>
        </div>
        <div id="decorative-image-container">
          <img src="https://images.unsplash.com/photo-1469474968028-56623f02e42e?auto=format&fit=crop&w=600&q=80" alt="Two travellers consulting a map in a forest clearing.">
        </div>
      </header>

      <section id="activity-brief">
        <article class="brief-card">
          <h3>Lesson focus</h3>
          <p>Recycling B1-B2 vocabulary on environmentally responsible holidays. Encourage quick recall of collocations that students met in a previous reading lesson.</p>
        </article>
        <article class="brief-card">
          <h3>How to play</h3>
          <p>Tap two cards to reveal them. Keep each pair of collocation + explanation you find. Try to complete the set in as few attempts as possible. Discuss any tricky vocabulary afterwards.</p>
        </article>
        <article class="brief-card">
          <h3>Teacher move</h3>
          <p>Before starting, elicit the collocations and drill pronunciation. After the game, ask students to create their own travel tips using the matched phrases.</p>
        </article>
      </section>

      <div class="memory-summary" role="status" aria-live="polite">
        <div class="summary-pill"><span class="icon">🎯</span> Target: 6 pairs</div>
        <div class="summary-pill"><span class="icon">⏱️</span> Suggested fast finishers repeat for a better score.</div>
        <div class="summary-pill"><span class="icon">💬</span> Encourage students to read the explanation aloud when they make a match.</div>
      </div>

      <div class="memory-status" aria-live="polite">
        <div>Attempts: <strong id="attempt-count">0</strong></div>
        <div>Matches: <strong id="match-count">0</strong>/6</div>
        <div>Accuracy: <strong id="accuracy">0%</strong></div>
        <div>Time: <strong id="timer">00:00</strong></div>
      </div>

      <section class="memory-grid" id="memory-grid" aria-label="Pelmanism cards"></section>

      <div class="activity-controls">
        <button id="reset-btn" class="activity-btn secondary">Reset activity</button>
        <button id="show-feedback-btn" class="activity-btn" disabled>Show language review</button>
        <span id="game-message" aria-live="polite" style="color: var(--clay-brown);"></span>
      </div>

      <section class="language-support" aria-labelledby="support-title">
        <h3 id="support-title">Language coaching moves</h3>
        <ul>
          <li>Ask: “What part of the collocation could you change to talk about your own travel habits?”</li>
          <li>Prompt learners to notice word stress (e.g., <em>CARbon FOOTprint</em>, <em>LOcal cuiSINE</em>).</li>
          <li>Encourage mini-dialogues where students justify why the collocation fits the explanation.</li>
        </ul>
      </section>
    </main>

    <aside id="feedback-sidebar" aria-labelledby="feedback-title" aria-hidden="true">
      <div class="feedback-header">
        <h3 id="feedback-title">Language review</h3>
        <div id="feedback-score"></div>
      </div>
      <div id="feedback-details"></div>
      <div class="feedback-footer">
        <button id="close-feedback-btn">Close review</button>
      </div>
    </aside>
  </div>

  <script>
    const pairs = [
      {
        id: 'carbon-footprint',
        collocation: 'reduce your carbon footprint',
        explanation: 'lower the greenhouse gases you produce when you travel',
        example: 'I try to reduce my carbon footprint by taking the train to conferences instead of flying.'
      },
      {
        id: 'eco-lodge',
        collocation: 'stay in an eco-lodge',
        explanation: 'choose accommodation that minimises environmental impact',
        example: 'We decided to stay in an eco-lodge that uses solar panels and recycled water.'
      },
      {
        id: 'offset-emissions',
        collocation: 'offset your emissions',
        explanation: 'pay for projects that balance out the CO₂ created by your trip',
        example: 'Our class calculated the distance of the journey and offset the emissions by planting trees.'
      },
      {
        id: 'reusable-bottle',
        collocation: 'carry a reusable water bottle',
        explanation: 'avoid buying plastic bottles by refilling one container',
        example: 'Remember to carry a reusable water bottle because most hostels offer free refills.'
      },
      {
        id: 'local-cuisine',
        collocation: 'try the local cuisine',
        explanation: 'eat food prepared with ingredients from the region you visit',
        example: 'Trying the local cuisine supports small restaurants and gives you a taste of the culture.'
      },
      {
        id: 'public-pass',
        collocation: 'use a public transport pass',
        explanation: 'travel with buses or trains instead of hiring private cars',
        example: 'Buying a public transport pass made it easy to explore the city sustainably.'
      }
    ];

    const grid = document.getElementById('memory-grid');
    const attemptCountEl = document.getElementById('attempt-count');
    const matchCountEl = document.getElementById('match-count');
    const accuracyEl = document.getElementById('accuracy');
    const timerEl = document.getElementById('timer');
    const messageEl = document.getElementById('game-message');
    const resetBtn = document.getElementById('reset-btn');
    const showFeedbackBtn = document.getElementById('show-feedback-btn');
    const feedbackSidebar = document.getElementById('feedback-sidebar');
    const feedbackScore = document.getElementById('feedback-score');
    const feedbackDetails = document.getElementById('feedback-details');
    const closeFeedbackBtn = document.getElementById('close-feedback-btn');

    let deck = [];
    let revealedCards = [];
    let attempts = 0;
    let matches = 0;
    let isProcessing = false;
    let timerInterval = null;
    let secondsElapsed = 0;

    function formatTime(totalSeconds) {
      const minutes = String(Math.floor(totalSeconds / 60)).padStart(2, '0');
      const seconds = String(totalSeconds % 60).padStart(2, '0');
      return `${minutes}:${seconds}`;
    }

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i -= 1) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function buildDeck() {
      const cards = [];
      pairs.forEach(pair => {
        cards.push({
          pairId: pair.id,
          type: 'collocation',
          label: pair.collocation,
          ariaLabel: `Collocation: ${pair.collocation}`
        });
        cards.push({
          pairId: pair.id,
          type: 'explanation',
          label: pair.explanation,
          ariaLabel: `Explanation: ${pair.explanation}`
        });
      });
      return shuffle(cards);
    }

    function createCard(cardData, index) {
      const button = document.createElement('button');
      button.className = 'memory-card';
      button.setAttribute('data-pair', cardData.pairId);
      button.setAttribute('data-type', cardData.type);
      button.setAttribute('data-index', index);
      button.setAttribute('aria-label', cardData.ariaLabel);

      const inner = document.createElement('div');
      inner.className = 'card-inner';

      const front = document.createElement('div');
      front.className = 'card-front';
      front.textContent = cardData.type === 'collocation' ? 'Collocation' : 'Explanation';

      const back = document.createElement('div');
      back.className = 'card-back';
      back.textContent = cardData.label;

      inner.appendChild(front);
      inner.appendChild(back);
      button.appendChild(inner);

      button.addEventListener('click', () => handleCardClick(button));
      return button;
    }

    function startTimer() {
      clearInterval(timerInterval);
      timerInterval = setInterval(() => {
        secondsElapsed += 1;
        timerEl.textContent = formatTime(secondsElapsed);
      }, 1000);
    }

    function stopTimer() {
      clearInterval(timerInterval);
      timerInterval = null;
    }

    function updateStats() {
      attemptCountEl.textContent = attempts;
      matchCountEl.textContent = `${matches}`;
      const accuracy = attempts ? Math.round((matches / attempts) * 100) : 0;
      accuracyEl.textContent = `${accuracy}%`;
    }

    function lockCards(cards) {
      cards.forEach(card => {
        card.classList.add('matched');
        card.setAttribute('disabled', 'true');
      });
    }

    function hideCards(cards) {
      cards.forEach(card => {
        card.classList.remove('revealed');
      });
    }

    function openFeedback() {
      document.body.classList.add('feedback-open');
      document.getElementById('app-wrapper').classList.add('feedback-visible');
      feedbackSidebar.setAttribute('aria-hidden', 'false');
    }

    function closeFeedback() {
      document.body.classList.remove('feedback-open');
      document.getElementById('app-wrapper').classList.remove('feedback-visible');
      feedbackSidebar.setAttribute('aria-hidden', 'true');
    }

    function populateFeedback() {
      const accuracy = attempts ? Math.round((matches / attempts) * 100) : 0;
      feedbackScore.textContent = `You made ${matches} matches in ${attempts} attempts (${accuracy}% accuracy) in ${formatTime(secondsElapsed)}.`;
      feedbackDetails.innerHTML = '';

      pairs.forEach(pair => {
        const item = document.createElement('article');
        item.className = 'feedback-item';
        const heading = document.createElement('h4');
        heading.textContent = pair.collocation;
        const explanation = document.createElement('p');
        explanation.textContent = `Meaning: ${pair.explanation}.`;
        const example = document.createElement('p');
        example.className = 'example';
        example.textContent = `Example: "${pair.example}"`;
        item.appendChild(heading);
        item.appendChild(explanation);
        item.appendChild(example);
        feedbackDetails.appendChild(item);
      });
    }

    function checkCompletion() {
      if (matches === pairs.length) {
        stopTimer();
        messageEl.textContent = 'Brilliant! You matched every card. Open the review for a debrief.';
        showFeedbackBtn.disabled = false;
        populateFeedback();
      }
    }

    function handleCardClick(card) {
      if (isProcessing || card.classList.contains('revealed') || card.classList.contains('matched')) return;

      if (!timerInterval) {
        startTimer();
      }

      card.classList.add('revealed');
      revealedCards.push(card);

      if (revealedCards.length === 2) {
        isProcessing = true;
        attempts += 1;
        updateStats();

        const [first, second] = revealedCards;
        const isMatch = first.dataset.pair === second.dataset.pair && first.dataset.type !== second.dataset.type;

        if (isMatch) {
          matches += 1;
          lockCards(revealedCards);
          messageEl.textContent = 'Nice match! Say the collocation aloud with your partner.';
          updateStats();
          revealedCards = [];
          isProcessing = false;
          checkCompletion();
        } else {
          messageEl.textContent = 'Not quite. Compare the cards aloud, then try again.';
          setTimeout(() => {
            hideCards(revealedCards);
            revealedCards = [];
            isProcessing = false;
          }, 900);
        }
      }
    }

    function resetGame() {
      deck = buildDeck();
      grid.innerHTML = '';
      deck.forEach((cardData, index) => {
        const cardEl = createCard(cardData, index);
        grid.appendChild(cardEl);
      });
      revealedCards = [];
      attempts = 0;
      matches = 0;
      secondsElapsed = 0;
      stopTimer();
      timerEl.textContent = '00:00';
      updateStats();
      messageEl.textContent = 'Game reset. Aim for a better accuracy score this time!';
      showFeedbackBtn.disabled = true;
      closeFeedback();
    }

    resetBtn.addEventListener('click', resetGame);
    showFeedbackBtn.addEventListener('click', () => {
      populateFeedback();
      openFeedback();
    });
    closeFeedbackBtn.addEventListener('click', () => {
      closeFeedback();
      showFeedbackBtn.focus();
    });

    document.addEventListener('keydown', event => {
      if (event.key === 'Escape' && feedbackSidebar.getAttribute('aria-hidden') === 'false') {
        closeFeedback();
        showFeedbackBtn.focus();
      }
    });

    resetGame();
  </script>
</body>
</html>
